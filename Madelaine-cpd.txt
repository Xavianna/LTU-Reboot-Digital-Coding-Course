Lesson 1.0 - 09/11/2020

The reboot digital coding course starts tomorrow.

Lesson 1.1 - 10/11/2020 (HTML)

Reflection

In today's session I learnt that the web development industry is a rewarding, lucrative and creative industry to get into.

I also introduced myself to a class of strangers, this was initially a hard thing for me to do.

Tha part that I enjoyed the most getting to know people across UK who are interested in coding. We had to introduce ourselves at the beginning.

The part that I found hard was speaking out in a class full of strangers.

After the lesson we watched a video about the internet and its terminologies.

Lesson 1.2 - 11/11/2020

Today I had a refresher about the WWW, internet, client, server, DNS.

We created a github account and also learnt about cloud computing.

After the lesson, I installed visual studio code and Github desktop.


Lesson 1.3 - 12/11/2020

I missed this lesson due to an interview but having reviewed the recording. I learnt ......

Github allows you to save changes, revert to previous versions and your codes secure. We can also send an alert/notifications via email.

I created a new repository, added a README file, made changes to the file after which I commited the changes and then connected it to Github desktop.

Lesson 1.4 - 13/11/2020

I had some issues with Teams login earlier and the team had some other issues. Today I received my LTU login and am officially a student.

Although, I missed yesterday's class, I was still able to catch up.

Today I learnt how to add a file in visual studio code and committing changes to main on Github Desktop.

I learnt more about freecodecamp and a mobile code learning app called https://getmimo.com/.

We were introduced to a few websites including Youtubers who will teach us more about HTML, CSS, Javascript including understanding of the industry.

The part I enjoyed most was knowing that there are so many free resources available to help me learn about coding.

The part that I found hard was to find the resource that would suit my learning experience best.


Lesson 1.5 - 16/11/2020

Today we learnt about HTML (Hyper Text Markup Language). We were shown how to view source code of a webpage - https://getbootstrap.com/. Then I created 3 tasks and explored the different html tags and added the HTML5 doctype so the website qualifies and is recognised as a HTML5 website. I also added a Live Server onto VSC as I missed the lesson on Thursday. This allowed me to "Go Live" and view the website I was working on a browser. 

The part I enjoyed most was learning a few shortcuts that can be used during coding and that the html tags opens and closes automatically. This is very handy. We also learnt to add different heading sizes from h1 to h6 and variations to text to make it bold using <strong> </strong> and italic <em> </em>. We also learnt to add break spaces using <br> or <br />. To add HTML5 doctype type "!" then tab. To add all levels of heading type "h1+h2+h3+h4+h5+h6" then tab.

I didn't particularly find anything hard in this lesson and I enjoyed it immensely. Still trying to access Thursday's lesson video.

Lesson 1.6 - 17/11/2020

Today, I learnt about creating links to a webpage, to open it in a separate tab and to allow mailing to an email address when clicking on a link.

Relative paths change depending on the page the link is on o.e. same directory or subdirectories (internal or local paths/folders; something I have direct access to).

Abosolute paths refer to a specific location of the file (external paths/file location; something I don't have direct access unless it is through a link). This includes the domain i.e. website link.

I also learnt how to add images with an alt tag to describe the image into my website.

Finally, I learnt to create unordered and ordered lists.

I also learnt to add comments into my website.

Today's take away task is to complete the HTML quiz and report on our scores. I was surprised to have scored 40/40 (100%). I completed the quiz in around 14 minutes.

Lesson 1.7 - 18/11/2020 (CSS)

Today, I learnt to style my website using CSS. We created 4 tasks Task 2.2.1 - 2.2.4 and 4 different stylesheets to connect them to the appropriate html file. We had to save after every change to keep track of what changes was made.

To add the css link it is easy to type "link" then press tab.

The part I enjoyed most was to learn about being able to set specific styles into the stylesheet and website. Also, changing the background colour of the website is always fun.

**Catchup session question**
Question for Luke about html. html vs htm file extension?
Old way of naming the website is .htm but new ones are .html.
We went through some free learning websites and Luke's CSS & Javascript cheatsheet and other useful repositories.

Lesson 1.8 - 19/11/2020

Today I learnt about creating classes and ids in CSS. How to apply them into the html page.

I discovered more shortcuts for VSC.
div#header [tab] to create the whole area
div#footer{lorem} [{} will display word in between as content]

I also learnt about inline (span) and block (div) elements.

I learnt new HTML5 codes for creating block elements instead of using <div> tags.
<header></header>
<main></main>
<aside></aside>
<footer></footer>

Then we created interactive links where the colour (and size) would change when the mouse hovers over the word and when the site was visited.

The lesson ended with how to create page elements such as borders, padding, margin and site contents.

Lesson 1.9 - 20/11/2020

Today I learnt how to add borders, margins and paddings in css.

Relative positioning - Moving an item/element from an area from its original position.

Toggle commenting on VSC ctrl + / (Useful shortcut tip).

Absolute positioning - take the element out of the normal flow and position it in relation to the window (or the closest non-static element).

<style></style> 
The tags above are placed within the <header></header> tag. It is essentially css within the HTML file. Coding everything in one html page is for speed but not recommended.

If position: relative is being removed from the parent class, the child class will look at the html (grandparent) rule which means that the child box will go outside the parent box when margins and paddings are removed. It will not be contained within the parent class anymore.

Setting a div space/container then set image container in css so the image will take up the space of what is specified in the div container.


Lesson 1.10 - 23/11/2020

Float - assigning an element to a corner.

Clear - Ensuring that the element is clear from left, right or both sides of the float area.

CSS Frameworks - helps us with common tasks such as
- floating, centering elements
- Developing for different screen sizes and ratios
- Keeping code tidy
- Resetting styles to a standard 'starting position'

Learnt line-height: added some space before the (word) line.

Styling img and paragraph tags separately within a section.

Added google fonts to our html and stylesheet. https://fonts.google.com/

We learnt more about websites where we can import css and symbols from:
- https://tailwindcss.com/
- https://dev.w3.org/html5/html-author/charref

We also learnt how to add image locally.


Take away task 2.4.6

HTML Quiz - Already 100% so won't retake. 

CSS Quiz - https://www.w3schools.com/css/css_quiz.asp (25 questions)

Results - 100% completed in around 16 mins.


Lesson 1.11 (Javascript)

Note that JavaScript (JS) is not Java.
It is a client side scripting language, works in your browser rather on the server.
Works with HTML & CSS to create dynamic webpages sites and apps. For example to respond to input from users.

Used to not work outside of browsers but it does now.

Named JavaScript for popularity purposes. Standardized in 1995.
This class covers ES5, standardized in 2009. Went through many trials.

http://www.ecma-international.org/ecma-262/5.1/

You can create games using JavaScript.
Track users and hold data with cookies.
Interactive elements of web pages.
Googlemaps (JavaScript & AJAX).
Google docs and Google scripts.
Tabs, Sliders, drop down menus.
Drawing and Animation e.g. Adobe Suites.
Game Development - Game Engine Unity. It uses C# + JavaScript.

How do we use JavaScript?
<script> </script> tags.
<script src="js/file.js"></script>

Computers are great at processing but rubbish at understanding. Instructions must be simple and clear. Think like a programmer.
It can be irritating & difficult at first.

How does JavaScript work?
1) Visit a website with JS code.
2) Browser reads the code line by line.
3) Browser runs each line of code as it reads it.
4) Based on the instructions, the browser performs caluculations and changes the HTML and CSS on the page.
5) If the browser finds code it doesn't understand, it stops running and creates an error message.

https://www.youtube.com/watch?v=cDA3_5982h8 

https://developers.google.com/web/tools/chrome-devtools/console/

Each instruction in JavaScript is a 'statement'.
Commenting in JavaScript /* */ (for long comments) or // (for short single line comments)

Statements to use
Open a popup box - alert('');
Display message in your console - console.log('');
Add something to the page - document.write('');

REPL - Read Evaluate Print Loop.

A variable is a named container to hold a value that might change. Declaring/creating a variable.
Like 'x' in algebra.

var numberOfKittens;

var numberOfKittens = 5;

When you first create a variable, it does not have a value (it is undefined).
You can set a value for a variable.
Variables can hold different types of data.
The value of a variable can change over time.
Variable names is case sensitive.
A new variable should have a unique name.
Variable names need to start with a letter, dollar sign $, or underscore _
Avoid reserved words such as https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords
Choose clarity and meaning for humans to read later.

var numberOfKittens = 5;
console.log(numberOfKittens);
The results will return 5.

Different data types:
- String of characters (words)
- Integer/floating point (whole value or decimal numbers)
- Boolean (true/false)
- Undefintd (random name)
- Null (explicitly empty value);

JavaScript automatically converts integers to floats.
NaN = Not-A-Number

Arithmetic Operators - Negation, Addition, Subtraction, Multiplication, Division, Modulus (%)
Modulus for example is 1 for 4/3 (the remainder or 4 divide by 3)

Concatenation operator (concatenate) is when you put 2 strings together to put it into 1 string using the operator +.
Add space before and after string if a space is needed.

+= is to add things to the end of a string instead of creating a new variable.

Combining Strings and Numbers using concatenate operator. Creating variables with strings and numbers and + to join them together.

Learnt to use the toFixed() parameter as well. https://www.w3schools.com/jsref/jsref_tofixed.asp


Lesson 1.11 (Javascript Catchup @ 1PM)
How to do string concatenation.
How to use boolean.
How to use variables.

More examples on how to concatenate variables and strings.
We learnt how to do percentages, use toFixed() parameter.
Do not use the % symbol for calculating percentages as that is a symbol for modulus.

